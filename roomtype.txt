import React, { useState } from "react";
import {
  Container,
  Drawer,
  List,
  ListItem,
  ListItemText,
  AppBar,
  Toolbar,
  Typography,
  Button,
  Card,
  CardContent,
  CardMedia,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  IconButton,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Snackbar,
  Alert,
} from "@mui/material";
import { Menu } from "@mui/icons-material";
import { CSSTransition } from "react-transition-group";

// Dummy data
const initialSubjects = [
  { name: "Mathematics", createdAt: "2024-01-01", modifiedAt: "2024-01-01" },
  { name: "Science", createdAt: "2024-01-01", modifiedAt: "2024-01-01" },
];
const initialRoomTypes = [
  { name: "Lecture", createdAt: "2024-01-01", modifiedAt: "2024-01-01" },
  { name: "Lab", createdAt: "2024-01-01", modifiedAt: "2024-01-01" },
];
const initialSections = [
  { name: "dtsit 1e2", createdAt: "2024-01-01", modifiedAt: "2024-01-01" },
  { name: "senior high", createdAt: "2024-01-01", modifiedAt: "2024-01-01" },
];

export default function Home() {
  const [selectedSidebar, setSelectedSidebar] = useState("Dashboard");
  const [open, setOpen] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState(""); // for switching categories
  const [subjectName, setSubjectName] = useState("");
  const [roomTypeName, setRoomTypeName] = useState("");
  const [sectionName, setSectionName] = useState("");
  const [subjects, setSubjects] = useState(initialSubjects);
  const [roomTypes, setRoomTypes] = useState(initialRoomTypes);
  const [sections, setSections] = useState(initialSections);
  const [editMode, setEditMode] = useState(null); // for edit mode
  const [snackMessage, setSnackMessage] = useState("");

  const handleSidebarClick = (section) => {
    setSelectedSidebar(section);
    setSelectedCategory(section);
  };

  const handleAddSubject = () => {
    if (subjectName.trim() === "") return;
    const newSubject = {
      name: subjectName,
      createdAt: new Date().toLocaleDateString(),
      modifiedAt: new Date().toLocaleDateString(),
    };
    setSubjects([...subjects, newSubject]);
    setSubjectName("");
    setSnackMessage("Subject added successfully!");
  };

  const handleAddRoomType = () => {
    if (roomTypeName.trim() === "") return;
    const newRoomType = {
      name: roomTypeName,
      createdAt: new Date().toLocaleDateString(),
      modifiedAt: new Date().toLocaleDateString(),
    };
    setRoomTypes([...roomTypes, newRoomType]);
    setRoomTypeName("");
    setSnackMessage("Room type added successfully!");
  };

  const handleAddSection = () => {
    if (sectionName.trim() === "") return;
    const newSection = {
      name: sectionName,
      createdAt: new Date().toLocaleDateString(),
      modifiedAt: new Date().toLocaleDateString(),
    };
    setSections([...sections, newSection]);
    setSectionName("");
    setSnackMessage("Section added successfully!");
  };

  const handleEditSubject = (index) => {
    const updatedSubjects = [...subjects];
    updatedSubjects[index] = {
      ...updatedSubjects[index],
      name: subjectName,
      modifiedAt: new Date().toLocaleDateString(),
    };
    setSubjects(updatedSubjects);
    setEditMode(null);
    setSubjectName("");
    setSnackMessage("Subject edited successfully!");
  };

  const handleEditRoomType = (index) => {
    const updatedRoomTypes = [...roomTypes];
    updatedRoomTypes[index] = {
      ...updatedRoomTypes[index],
      name: roomTypeName,
      modifiedAt: new Date().toLocaleDateString(),
    };
    setRoomTypes(updatedRoomTypes);
    setEditMode(null);
    setRoomTypeName("");
    setSnackMessage("Room type edited successfully!");
  };

  const handleEditSection = (index) => {
    const updatedSections = [...sections];
    updatedSections[index] = {
      ...updatedSections[index],
      name: sectionName,
      modifiedAt: new Date().toLocaleDateString(),
    };
    setSections(updatedSections);
    setEditMode(null);
    setSectionName("");
    setSnackMessage("Section edited successfully!");
  };

  const handleDeleteSubject = (index) => {
    const updatedSubjects = subjects.filter((_, i) => i !== index);
    setSubjects(updatedSubjects);
    setSnackMessage("Subject deleted successfully!");
  };

  const handleDeleteRoomType = (index) => {
    const updatedRoomTypes = roomTypes.filter((_, i) => i !== index);
    setRoomTypes(updatedRoomTypes);
    setSnackMessage("Room type deleted successfully!");
  };

  const handleDeleteSection = (index) => {
    const updatedSections = sections.filter((_, i) => i !== index);
    setSections(updatedSections);
    setSnackMessage("Section deleted successfully!");
  };

  const handleCloseSnackbar = () => {
    setSnackMessage("");
  };

  return (
    <Box sx={{ display: "flex" }}>
      {/* Sidebar (Drawer) */}
      <Drawer
        sx={{
          width: 240,
          flexShrink: 0,
          "& .MuiDrawer-paper": {
            width: 240,
            boxSizing: "border-box",
          },
        }}
        variant="permanent"
        anchor="left"
        open={open}
      >
        <List>
          <ListItem button onClick={() => handleSidebarClick("Dashboard")}>
            <ListItemText primary="Dashboard" />
          </ListItem>
          <ListItem button onClick={() => handleSidebarClick("Subjects")}>
            <ListItemText primary="Subjects" />
          </ListItem>
          <ListItem button onClick={() => handleSidebarClick("Room Types")}>
            <ListItemText primary="Room Types" />
          </ListItem>
          <ListItem button onClick={() => handleSidebarClick("Sections")}>
            <ListItemText primary="Sections" />
          </ListItem>
          <ListItem button onClick={() => handleSidebarClick("Logout")}>
            <ListItemText primary="Logout" />
          </ListItem>
        </List>
      </Drawer>

      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          bgcolor: "background.default",
          padding: 2,
          display: "flex",
          flexDirection: "column",
        }}
      >
        <AppBar position="sticky">
          <Toolbar>
            <IconButton
              edge="start"
              color="inherit"
              aria-label="menu"
              sx={{ mr: 2 }}
            >
              <Menu />
            </IconButton>
            <Typography variant="h6">Dashboard</Typography>
          </Toolbar>
        </AppBar>

        {/* Subjects Section */}
        <CSSTransition
          in={selectedSidebar === "Subjects"}
          timeout={300}
          classNames="fade"
          unmountOnExit
        >
          <Container sx={{ marginTop: 4 }}>
            <h2>Subjects</h2>
            {/* Add Subject Form */}
            <TextField
              label="Subject Name"
              variant="outlined"
              fullWidth
              value={subjectName}
              onChange={(e) => setSubjectName(e.target.value)}
              sx={{ marginBottom: 2 }}
            />
            <Button
              variant="contained"
              color="primary"
              onClick={
                editMode !== null
                  ? () => handleEditSubject(editMode)
                  : handleAddSubject
              }
              sx={{ marginBottom: 2 }}
            >
              {editMode !== null ? "Edit Subject" : "Add Subject"}
            </Button>

            {/* Subjects Table */}
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Name</TableCell>
                    <TableCell>Created At</TableCell>
                    <TableCell>Modified At</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {subjects.map((subject, index) => (
                    <TableRow key={index}>
                      <TableCell>{subject.name}</TableCell>
                      <TableCell>{subject.createdAt}</TableCell>
                      <TableCell>{subject.modifiedAt}</TableCell>
                      <TableCell>
                        <Button
                          variant="outlined"
                          color="primary"
                          onClick={() => {
                            setSubjectName(subject.name);
                            setEditMode(index);
                          }}
                        >
                          Edit
                        </Button>
                        <Button
                          variant="outlined"
                          color="secondary"
                          onClick={() => handleDeleteSubject(index)}
                        >
                          Delete
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Container>
        </CSSTransition>

        {/* Room Types Section */}
        <CSSTransition
          in={selectedSidebar === "Room Types"}
          timeout={300}
          classNames="fade"
          unmountOnExit
        >
          <Container sx={{ marginTop: 4 }}>
            <h2>Room Types</h2>
            {/* Add Room Type Form */}
            <TextField
              label="Room Type Name"
              variant="outlined"
              fullWidth
              value={roomTypeName}
              onChange={(e) => setRoomTypeName(e.target.value)}
              sx={{ marginBottom: 2 }}
            />
            <Button
              variant="contained"
              color="primary"
              onClick={
                editMode !== null
                  ? () => handleEditRoomType(editMode)
                  : handleAddRoomType
              }
              sx={{ marginBottom: 2 }}
            >
              {editMode !== null ? "Edit Room Type" : "Add Room Type"}
            </Button>

            {/* Room Types Table */}
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Name</TableCell>
                    <TableCell>Created At</TableCell>
                    <TableCell>Modified At</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {roomTypes.map((roomType, index) => (
                    <TableRow key={index}>
                      <TableCell>{roomType.name}</TableCell>
                      <TableCell>{roomType.createdAt}</TableCell>
                      <TableCell>{roomType.modifiedAt}</TableCell>
                      <TableCell>
                        <Button
                          variant="outlined"
                          color="primary"
                          onClick={() => {
                            setRoomTypeName(roomType.name);
                            setEditMode(index);
                          }}
                        >
                          Edit
                        </Button>
                        <Button
                          variant="outlined"
                          color="secondary"
                          onClick={() => handleDeleteRoomType(index)}
                        >
                          Delete
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Container>
        </CSSTransition>

        {/* Sections Section */}
        <CSSTransition
          in={selectedSidebar === "Sections"}
          timeout={300}
          classNames="fade"
          unmountOnExit
        >
          <Container sx={{ marginTop: 4 }}>
            <h2>Sections</h2>
            {/* Add Section Form */}
            <TextField
              label="Section Name"
              variant="outlined"
              fullWidth
              value={sectionName}
              onChange={(e) => setSectionName(e.target.value)}
              sx={{ marginBottom: 2 }}
            />
            <Button
              variant="contained"
              color="primary"
              onClick={
                editMode !== null
                  ? () => handleEditSection(editMode)
                  : handleAddSection
              }
              sx={{ marginBottom: 2 }}
            >
              {editMode !== null ? "Edit Section" : "Add Section"}
            </Button>

            {/* Sections Table */}
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Name</TableCell>
                    <TableCell>Created At</TableCell>
                    <TableCell>Modified At</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {sections.map((section, index) => (
                    <TableRow key={index}>
                      <TableCell>{section.name}</TableCell>
                      <TableCell>{section.createdAt}</TableCell>
                      <TableCell>{section.modifiedAt}</TableCell>
                      <TableCell>
                        <Button
                          variant="outlined"
                          color="primary"
                          onClick={() => {
                            setSectionName(section.name);
                            setEditMode(index);
                          }}
                        >
                          Edit
                        </Button>
                        <Button
                          variant="outlined"
                          color="secondary"
                          onClick={() => handleDeleteSection(index)}
                        >
                          Delete
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Container>
        </CSSTransition>

        {/* Snackbar for feedback */}
        <Snackbar
          open={snackMessage !== ""}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
        >
          <Alert
            onClose={handleCloseSnackbar}
            severity="success"
            sx={{ width: "100%" }}
          >
            {snackMessage}
          </Alert>
        </Snackbar>
      </Box>
    </Box>
  );
}
